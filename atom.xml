<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hdsam的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-09T04:37:04.360Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hdsam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaweb中防止XSS攻击的几种办法</title>
    <link href="http://yoursite.com/2017/11/09/javaweb%E4%B8%AD%E9%98%B2%E6%AD%A2XSS%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/09/javaweb中防止XSS攻击的几种办法/</id>
    <published>2017-11-09T11:01:57.000Z</published>
    <updated>2017-11-09T04:37:04.360Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用java写个人博客系统，发现了如果用户提交数据到数据库，然后又从数据库取出显示到页面上，这一过程中存在的安全问题。<br><a id="more"></a></p><h1 id="javaweb中防止XSS攻击的简单解决办法"><a href="#javaweb中防止XSS攻击的简单解决办法" class="headerlink" title="javaweb中防止XSS攻击的简单解决办法"></a>javaweb中防止XSS攻击的简单解决办法</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p> 最开始在写前端页面时，发现不知如何处理富文本，就仅仅是用一个textare标签提交文章内容，但如果你提交中包含HTML标签或包含CSS样式时，如果对提交的内容不加任何处理的话， 仅通过Jsp页面EL表达式简单输出时，那么凡是能访问该页面的所有用户的显示都会受到影响。如果提交的内容包含JavaScript代码的话，代码会在访问该页面被执行，危害性更大，比如会触发弹窗，改写网页内容，或窃取用户Cookie等，以下是wikiPedia的解释：</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="external">跨站脚本</a>（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p></blockquote><h2 id="XSS的防范"><a href="#XSS的防范" class="headerlink" title="XSS的防范"></a>XSS的防范</h2><p>按Http请求的流程，</p><h3 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h3><p>1.后端输入时过滤，可以对用户提交数据做过滤，比如是对HttpServletRequest中，通过getParameter(“xxx”)获取值后做字符过滤，具体使用到可配置过滤器对请求包装成HttpServletRequestWrapper对象，然后在交由Controller处理。</p><p>2.后端输出时过滤，对于String类型的输出，不要直接使用EL表达式，可以使用Jstl的<code>&lt;c:out value=&quot;${yourVar}&quot; escapleXml=&quot;true&quot;/&gt;&lt;/c:out&gt;</code>，其中<code>escapleXml</code>缺省时，默认为<code>true</code>，这个标签会对<code>&lt;</code>,<br><code>&gt;</code>、<code>&amp;</code>等的字符做转义，而EL不会。</p><h3 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h3><p>前端通过js提交请求时，做提交内容转码处理；或对后端响应的页面做转码处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用java写个人博客系统，发现了如果用户提交数据到数据库，然后又从数据库取出显示到页面上，这一过程中存在的安全问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://yoursite.com/tags/javaweb/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端页面提交数据时ContentType的几种形式</title>
    <link href="http://yoursite.com/2017/11/03/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AEContentType%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BD%A2%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/11/03/前端页面提交数据ContentType的几种形式/</id>
    <published>2017-11-03T00:06:41.000Z</published>
    <updated>2017-11-05T13:52:49.665Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="前端提交数据时的ContentType形式"><a href="#前端提交数据时的ContentType形式" class="headerlink" title="前端提交数据时的ContentType形式"></a>前端提交数据时的ContentType形式</h1><p>1.json形式,如使用JQuery的Ajax:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">        url:<span class="string">"xxx"</span>,</div><div class="line">        type:<span class="string">"POST"</span>,</div><div class="line">        dataType:<span class="string">"json"</span>,</div><div class="line">        data: &#123;<span class="attr">key1</span>:<span class="string">"value1"</span>&#125;,</div><div class="line">        <span class="keyword">async</span>:<span class="literal">true</span>,</div><div class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">            <span class="comment">//todo</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>则请求中的Header含：<code>content-type: &quot;application/json&quot;</code>,内容形式为:<code>{&quot;key1&quot;:value1,...}</code>,若想要SpringMVC自动封装为对象，则应在方的对象类型前加上<code>@RequestBody</code>注解。</p><p>2.表单形式提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">"xxx"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>则Header含<code>content-type: &quot;application/x-www-form-urlencoded&quot;</code>, 内容形式是: <code>k1=v1&amp;k2=v2&amp;...</code> 对于此种形式，SpringMVC自动会封装为对象。</p><p>3.表单时且包含文件域,需设置enctype属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"mutipart/form-data"</span> <span class="attr">action</span>=<span class="string">"xxx"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>则Header中包含 <code>content-type: &quot;multipart/form-data;&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前端提交数据时的ContentType形式&quot;&gt;&lt;a href=&quot;#前端提交数据时的ContentType形式&quot; class=&quot;headerlink&quot; title=&quot;前端提交数据时的ContentType形式&quot;&gt;&lt;/a&gt;前端提交数
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="SpringMvc" scheme="http://yoursite.com/tags/SpringMvc/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客 intro</title>
    <link href="http://yoursite.com/2017/11/01/intro/"/>
    <id>http://yoursite.com/2017/11/01/intro/</id>
    <published>2017-11-01T11:24:16.000Z</published>
    <updated>2017-11-03T10:54:35.446Z</updated>
    
    <content type="html"><![CDATA[<p> hdsam的第一篇博客，这里是文章摘要。</p><a id="more"></a><h1 id="这里是文章主体"><a href="#这里是文章主体" class="headerlink" title="这里是文章主体"></a>这里是文章主体</h1><pre><code>System.out.println(&quot;hello hexo&quot;); </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; hdsam的第一篇博客，这里是文章摘要。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hello world" scheme="http://yoursite.com/tags/hello-world/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
